altgraph @ file:///AppleInternal/Library/BuildRoots/2c89a47b-9dd5-11ef-938f-6e654a286000/Library/Caches/com.apple.xbs/Sources/python3/altgraph-0.17.2-py2.py3-none-any.whl
blinker==1.8.2
click==8.1.7
et_xmlfile==2.0.0
Flask==3.0.3
Flask-SQLAlchemy==3.1.1
fpdf==1.7.2
future @ file:///AppleInternal/Library/BuildRoots/2c89a47b-9dd5-11ef-938f-6e654a286000/Library/Caches/com.apple.xbs/Sources/python3/future-0.18.2-py3-none-any.whl
importlib_metadata==7.1.0
itsdangerous==2.2.0
Jinja2==3.1.4
macholib @ file:///AppleInternal/Library/BuildRoots/2c89a47b-9dd5-11ef-938f-6e654a286000/Library/Caches/com.apple.xbs/Sources/python3/macholib-1.15.2-py2.py3-none-any.whl
MarkupSafe==2.1.5
openpyxl==3.1.5
six @ file:///AppleInternal/Library/BuildRoots/2c89a47b-9dd5-11ef-938f-6e654a286000/Library/Caches/com.apple.xbs/Sources/python3/six-1.15.0-py2.py3-none-any.whl
SQLAlchemy==2.0.40
typing_extensions==4.13.2
Werkzeug==3.0.3
zipp==3.19.0

@app.route('/download/csv')
def download_csv():
    staff_id = session.get('username')
    staff = User.query.filter_by(school_id=staff_id).first()
    logs = ServiceHour.query.filter_by(staff=staff_id, status=1).all()

    output = io.StringIO()
    writer = csv.writer(output)
    writer.writerow([f"Report for: {staff.first_name} {staff.last_name}"])
    writer.writerow([])
    writer.writerow(['Student', 'Activity', 'Hours', 'Date', 'Date Submitted', 'Group'])

    for log in logs:
        user = User.query.get(log.user_id)
        group = Group.query.get(log.group_id)
        writer.writerow([
            f"{user.first_name} {user.last_name}" if user else "Unknown",
            log.description,
            log.hours,
            log.date,
            log.log_time,
            group.name if group else "N/A"
        ])

    response = make_response(output.getvalue())
    response.headers["Content-Disposition"] = "attachment; filename=service_hours_report.csv"
    response.headers["Content-Type"] = "text/csv"
    return response


@app.route('/download/excel')
def download_excel():
    staff_id = session.get('username')
    staff = User.query.filter_by(school_id=staff_id).first()
    logs = ServiceHour.query.filter_by(staff=staff_id, status=1).all()

    wb = Workbook()
    ws = wb.active
    ws.title = "Service Hours"
    ws.append([f"Report for: {staff.first_name} {staff.last_name}"])
    ws.append([])
    ws.append(['Student', 'Activity', 'Hours', 'Date', 'Date Submitted', 'Group'])

    for log in logs:
        user = User.query.get(log.user_id)
        group = Group.query.get(log.group_id)
        ws.append([
            f"{user.first_name} {user.last_name}" if user else "Unknown",
            log.description,
            log.hours,
            log.date,
            log.log_time,
            group.name if group else "N/A"
        ])

    output = io.BytesIO()
    wb.save(output)
    output.seek(0)

    response = make_response(output.getvalue())
    response.headers["Content-Disposition"] = "attachment; filename=service_hours_report.xlsx"
    response.headers["Content-Type"] = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    return response


@app.route('/download/pdf')
def download_pdf():
    staff_id = session.get('username')
    staff = User.query.filter_by(school_id=staff_id).first()
    logs = ServiceHour.query.filter_by(staff=staff_id, status=1).all()

    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt=f"Report for: {staff.first_name} {staff.last_name}", ln=True, align='C')
    pdf.ln(10)

    pdf.set_font("Arial", size=10)
    for log in logs:
        user = User.query.get(log.user_id)
        group = Group.query.get(log.group_id)
        pdf.multi_cell(0, 10, txt=f"Student: {user.first_name} {user.last_name if user else 'Unknown'}\n"
                                   f"Activity: {log.description}\n"
                                   f"Hours: {log.hours}\n"
                                   f"Date: {log.date}\n"
                                   f"Submitted: {log.log_time}\n"
                                   f"Group: {group.name if group else 'N/A'}\n", border=0)
        pdf.ln(2)

    response = make_response(pdf.output(dest='S').encode('latin-1'))
    response.headers["Content-Disposition"] = "attachment; filename=service_hours_report.pdf"
    response.headers["Content-Type"] = "application/pdf"
    return response